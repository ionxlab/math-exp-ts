{"version":3,"file":"math-exp.min.js","mappings":"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","sources":["webpack://math-exp/webpack/universalModuleDefinition","webpack://math-exp/./src/core/ExpressionBuilder.ts","webpack://math-exp/./src/core/ExpressionParser.ts","webpack://math-exp/./src/exceptions/DivisionByZeroException.ts","webpack://math-exp/./src/exceptions/EmptyExpressionException.ts","webpack://math-exp/./src/exceptions/EvaluateException.ts","webpack://math-exp/./src/exceptions/MissingOperandException.ts","webpack://math-exp/./src/exceptions/MissingTermException.ts","webpack://math-exp/./src/expression/Expression.ts","webpack://math-exp/./src/expression/abstract/OperandAbstract.ts","webpack://math-exp/./src/expression/abstract/OperatorAbstract.ts","webpack://math-exp/./src/expression/abstract/OperatorFunctionAbstract.ts","webpack://math-exp/./src/expression/abstract/OperatorLeftRightAbstract.ts","webpack://math-exp/./src/expression/abstract/TermAbstract.ts","webpack://math-exp/./src/expression/index.ts","webpack://math-exp/./src/expression/operands/Constant.ts","webpack://math-exp/./src/expression/operands/Variable.ts","webpack://math-exp/./src/expression/operands/index.ts","webpack://math-exp/./src/expression/operators/arithmetic/Divide.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Exponent.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Minus.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Multiply.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Plus.operator.ts","webpack://math-exp/./src/expression/operators/bitwise/And.operator.ts","webpack://math-exp/./src/expression/operators/bitwise/Or.operator.ts","webpack://math-exp/./src/expression/operators/bitwise/Xor.operator.ts","webpack://math-exp/./src/expression/operators/function/Cos.operator.ts","webpack://math-exp/./src/expression/operators/function/Ln.operator.ts","webpack://math-exp/./src/expression/operators/function/Log.operator.ts","webpack://math-exp/./src/expression/operators/function/Sin.operator.ts","webpack://math-exp/./src/expression/operators/function/SquareRoot.operator.ts","webpack://math-exp/./src/expression/operators/function/Tan.operator.ts","webpack://math-exp/./src/expression/operators/index.ts","webpack://math-exp/./src/expression/utils/VariableMap.ts","webpack://math-exp/./src/expression/utils/index.ts","webpack://math-exp/./src/index.ts","webpack://math-exp/webpack/bootstrap","webpack://math-exp/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"math-exp\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math-exp\"] = factory();\n\telse\n\t\troot[\"math-exp\"] = factory();\n})(this, function() {\nreturn ","import {Expression} from \"../expression/Expression\";\r\nimport {TermAbstract} from \"../expression/abstract/TermAbstract\";\r\n\r\n\r\nexport class ExpressionBuilder {\r\n\r\n  private expression: Expression = new Expression();\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    this.expression.terms = this.expression.terms.concat(terms);\r\n    this.expression.setBrackets(false);\r\n  }\r\n\r\n  add(term: TermAbstract, index?: number): number {\r\n    if(index!==undefined)\r\n      this.expression.terms.splice(index, 0, term);\r\n    else\r\n      this.expression.push(term);\r\n\r\n    return this.expression.terms.length;\r\n  }\r\n\r\n  remove(index): Expression {\r\n    if(index>=0 && index<this.expression.terms.length)\r\n      this.expression.terms.splice(index, 1);\r\n\r\n    return this.expression;\r\n  }\r\n\r\n  getExpression(): Expression {\r\n    return this.expression;\r\n  }\r\n\r\n  clear() {\r\n    this.expression.terms = [];\r\n  }\r\n}","import {Expression} from \"../expression/Expression\";\r\n\r\n\r\nexport class ExpressionParser {\r\n  private expressionString: (string | undefined);\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  parse(): Expression {\r\n    let exp = new Expression();\r\n\r\n\r\n    return exp;\r\n  }\r\n}","import {EvaluateException} from \"./EvaluateException\";\r\n\r\nexport class DivisionByZeroException extends EvaluateException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {EvaluateException} from \"./EvaluateException\";\r\n\r\nexport class EmptyExpressionException extends EvaluateException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","\r\n\r\nexport class EvaluateException extends Error {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {MissingTermException} from \"./MissingTermException\";\r\n\r\nexport class MissingOperandException extends MissingTermException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {EvaluateException} from \"./EvaluateException\";\r\n\r\nexport class MissingTermException extends EvaluateException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {OperatorAbstract} from \"./abstract/OperatorAbstract\";\r\nimport {OperandAbstract} from \"./abstract/OperandAbstract\";\r\nimport {TermAbstract} from \"./abstract/TermAbstract\";\r\nimport {OperatorLeftRightAbstract} from \"./abstract/OperatorLeftRightAbstract\";\r\nimport {OperatorFunctionAbstract} from \"./abstract/OperatorFunctionAbstract\";\r\nimport {Constant} from \"./operands/Constant\";\r\nimport {MissingTermException} from \"../exceptions/MissingTermException\";\r\nimport {MissingOperandException} from \"../exceptions/MissingOperandException\";\r\nimport {EmptyExpressionException} from \"../exceptions/EmptyExpressionException\";\r\n\r\nexport class Expression extends TermAbstract {\r\n  public static debug = true;\r\n  readonly precedence: number = 19;\r\n\r\n  terms: Array<TermAbstract> = new Array<TermAbstract>();\r\n  private brackets: boolean = true;\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super();\r\n    if(terms !== undefined)\r\n      this.terms = this.terms.concat(terms);\r\n  }\r\n\r\n  push(term: TermAbstract): Expression {\r\n    this.terms.push(term);\r\n    return this;\r\n  }\r\n\r\n  pop(): TermAbstract {\r\n    return this.terms.pop();\r\n  }\r\n\r\n  shift(): TermAbstract {\r\n    return this.terms.shift();\r\n  }\r\n\r\n  unshift(term: TermAbstract): Expression {\r\n    this.terms.unshift(term);\r\n    return this;\r\n  }\r\n\r\n  setBrackets(active: boolean) {\r\n    this.brackets = active;\r\n  }\r\n\r\n  evaluate(): number {\r\n\r\n    if(this.terms.length==0)\r\n      throw new EmptyExpressionException();\r\n\r\n    this.Log(\"Evaluating:\", this.toString());\r\n\r\n    let temp = this.clone();\r\n\r\n    while(temp.terms.length>1 || !(temp.terms[0] instanceof OperandAbstract)) {\r\n\r\n      let highest = -1;\r\n      let highestId = -1;\r\n      temp.terms.forEach((t, id) => {\r\n        if(t.precedence>highest) {\r\n          highest = t.precedence;\r\n          highestId = id;\r\n        }\r\n      });\r\n      temp = this.evaluateTerm(temp, highestId);\r\n      this.Log(\"Temporary expression:\", temp.toString());\r\n    }\r\n\r\n    return (temp.terms[0] as OperandAbstract).evaluate();\r\n  }\r\n\r\n  private evaluateTerm(expression: Expression, index: number): Expression {\r\n\r\n    let temp = expression.clone();\r\n\r\n    const term = temp.terms[index];\r\n    this.Log(\"Evaluating Term:\", term.toString());\r\n\r\n    let value = 0;\r\n    if(!term) {\r\n      throw new MissingTermException(\"Term at '\"+index+\"' is missing.\");\r\n    } else if(term instanceof Expression) {\r\n      this.Log(\"Term is an 'Expression'\");\r\n      value = term.evaluate();\r\n      temp.terms[index] = new Constant(value);\r\n    } else if(term instanceof OperatorAbstract) {\r\n      if(term instanceof OperatorLeftRightAbstract) {\r\n        this.Log(\"Term is an 'OperatorLeftRight'\");\r\n        const left = temp.terms[index-1];\r\n        const right = temp.terms[index+1];\r\n\r\n        if(!(left instanceof OperandAbstract))\r\n          throw new MissingOperandException(\"Left argument of operator '\"+term.toString()+\"' is invalid.\");\r\n        if(!(right instanceof OperandAbstract))\r\n          throw new MissingOperandException(\"Right argument of operator '\"+term.toString()+\"' is invalid.\");\r\n\r\n        value = term.evaluate((left as OperandAbstract).evaluate(), (right as OperandAbstract).evaluate());\r\n\r\n        this.Log(\"Evaluated Value: \", value);\r\n\r\n        temp.terms[index] = new Constant(value);\r\n        temp.terms.splice(index+1, 1);\r\n        temp.terms.splice(index-1, 1);\r\n      } else if(term instanceof OperatorFunctionAbstract) {\r\n        this.Log(\"Term is an 'OperatorFunction'\");\r\n        value = term.evaluate();\r\n        temp.terms[index] = new Constant(value);\r\n      }\r\n    } else if(term instanceof OperandAbstract) {\r\n      this.Log(\"Term is an 'Operand'\");\r\n      value = term.evaluate();\r\n      temp.terms[index] = new Constant(value);\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  private Log(...args: Object[]) {\r\n    if(Expression.debug)\r\n      console.log.apply(console, args);\r\n  }\r\n\r\n  clone(): Expression {\r\n    let clone = new Expression();\r\n    clone.brackets = this.brackets;\r\n    clone.terms = clone.terms.concat(this.terms);\r\n    return clone;\r\n  }\r\n\r\n  toString(): string {\r\n    let str = \"\";\r\n    this.terms.forEach((t, id) => {\r\n      str += t.toString();\r\n    });\r\n    if(this.brackets)\r\n      str = \"(\"+str+\")\";\r\n    return str;\r\n  }\r\n}","import {TermAbstract} from \"./TermAbstract\";\r\n\r\n\r\nexport abstract class OperandAbstract extends TermAbstract {\r\n\r\n  readonly precedence: number = 0;\r\n  abstract evaluate(): number ;\r\n}","import {TermAbstract} from \"./TermAbstract\";\r\n\r\n\r\nexport abstract class OperatorAbstract extends TermAbstract {\r\n  name: string;\r\n  symbol: string;\r\n\r\n  protected constructor(name: string, symbol: string) {\r\n    super();\r\n    this.name = name;\r\n    this.symbol = symbol;\r\n  }\r\n}","import {OperatorAbstract} from \"./OperatorAbstract\";\r\nimport {Expression} from \"../Expression\";\r\n\r\n\r\nexport abstract class OperatorFunctionAbstract extends OperatorAbstract {\r\n  name: string;\r\n  symbol: string;\r\n  expression: Expression;\r\n\r\n  readonly precedence: number = 18;\r\n\r\n  protected constructor(name: string, symbol: string, expression?: Expression) {\r\n    super(name, symbol);\r\n    this.expression = expression;\r\n  }\r\n\r\n  abstract evaluate(): number ;\r\n\r\n  toString(): string {\r\n    return this.symbol+this.expression.toString();\r\n  };\r\n}","import {OperatorAbstract} from \"./OperatorAbstract\";\r\n\r\nexport abstract class OperatorLeftRightAbstract extends OperatorAbstract {\r\n  name: string;\r\n  symbol: string;\r\n\r\n  protected constructor(name: string, symbol: string) {\r\n    super(name, symbol);\r\n    this.name = name;\r\n    this.symbol = symbol;\r\n  }\r\n\r\n  abstract evaluate(left: number, right: number): number ;\r\n\r\n  toString(): string {\r\n    return this.symbol;\r\n  };\r\n}","\r\n\r\nexport abstract class TermAbstract {\r\n\r\n  abstract readonly precedence: number;\r\n  abstract toString(): string;\r\n}","\r\n\r\nexport {Expression} from './Expression'\r\n\r\nexport * from './operators'\r\nexport * from './operands'\r\n\r\nexport * from './utils'\r\n","import {OperandAbstract} from \"../abstract/OperandAbstract\";\r\n\r\n\r\nexport class Constant extends OperandAbstract {\r\n\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  evaluate(): number {\r\n    return this.value;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value.toString();\r\n  }\r\n}","import {OperandAbstract} from \"../abstract/OperandAbstract\";\r\nimport {VariableMap} from \"../utils/VariableMap\";\r\n\r\nexport class Variable extends OperandAbstract {\r\n  private coefficient: number = 0;\r\n  private letter: string;\r\n  private static _values = new VariableMap();\r\n\r\n  constructor(letter: string, coefficient?: number, value?: number) {\r\n    super();\r\n    this.letter = letter;\r\n    if(coefficient !== undefined)\r\n      this.coefficient = coefficient;\r\n    if(value !== undefined)\r\n      Variable._values.set(this.letter, value);\r\n  }\r\n\r\n  static get values(): VariableMap {\r\n    return Variable._values;\r\n  }\r\n\r\n  evaluate(): number {\r\n    let val = Variable._values.get(this.letter);\r\n    if(val == undefined)\r\n      val = 0;\r\n    return (this.coefficient*val);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.coefficient.toString()+this.letter;\r\n  }\r\n}\r\n","\r\n\r\nexport {Constant} from './Constant'\r\nexport {Variable} from './Variable'","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\nimport {DivisionByZeroException} from \"../../../exceptions/DivisionByZeroException\";\r\n\r\nexport class DivideOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 13;\r\n\r\n  constructor() {\r\n    super(\"Divide\", \"/\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    if(right == 0)\r\n      throw new DivisionByZeroException();\r\n\r\n    return left/right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class ExponentOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 14;\r\n\r\n  constructor() {\r\n    super(\"Exponent\", \"^\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return Math.pow(left, right);\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class MinusOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 12;\r\n\r\n  constructor() {\r\n    super(\"Minus\", \"-\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return left-right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class MultiplyOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 13;\r\n\r\n  constructor() {\r\n    super(\"Multiply\", \"*\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return left*right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class PlusOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 12;\r\n\r\n  constructor() {\r\n    super(\"Plus\", \"+\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return left+right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\n\r\nexport class AndOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 8;\r\n\r\n  evaluate(left: number, right: number): number {\r\n    return left & right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\n\r\nexport class OrOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 6;\r\n\r\n  evaluate(left: number, right: number): number {\r\n    return left | right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\n\r\nexport class XorOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 7;\r\n\r\n  evaluate(left: number, right: number): number {\r\n    return left ^  right;\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class CosOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Cos\", \"cos\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.cos(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class LnOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Ln\", \"Ln\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.log(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class LogOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Log\", \"Log\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.log10(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class SinOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Sin\", \"sin\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.sin(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class SquareRootOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Sqrt\", \"√\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.sqrt(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class TanOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Tan\", \"tan\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.tan(result);\r\n  }\r\n}","\r\n\r\nexport {DivideOperator} from './arithmetic/Divide.operator'\r\nexport {ExponentOperator} from './arithmetic/Exponent.operator'\r\nexport {MinusOperator} from './arithmetic/Minus.operator'\r\nexport {MultiplyOperator} from './arithmetic/Multiply.operator'\r\nexport {PlusOperator} from './arithmetic/Plus.operator'\r\n\r\nexport {AndOperator} from './bitwise/And.operator'\r\nexport {OrOperator} from './bitwise/Or.operator'\r\nexport {XorOperator} from './bitwise/Xor.operator'\r\n\r\nexport {CosOperator} from './function/Cos.operator'\r\nexport {LnOperator} from './function/Ln.operator'\r\nexport {LogOperator} from './function/Log.operator'\r\nexport {SinOperator} from './function/Sin.operator'\r\nexport {SquareRootOperator} from './function/SquareRoot.operator'\r\nexport {TanOperator} from './function/Tan.operator'\r\n","\r\n\r\nexport class VariableMap extends Map<string, number> {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.set('a', 0);\r\n    this.set('b', 0);\r\n    this.set('c', 0);\r\n    this.set('d', 0);\r\n    this.set('e', 0);\r\n    this.set('f', 0);\r\n    this.set('g', 0);\r\n    this.set('h', 0);\r\n    this.set('i', 0);\r\n    this.set('j', 0);\r\n    this.set('k', 0);\r\n    this.set('l', 0);\r\n    this.set('m', 0);\r\n    this.set('n', 0);\r\n    this.set('o', 0);\r\n    this.set('p', 0);\r\n    this.set('q', 0);\r\n    this.set('r', 0);\r\n    this.set('s', 0);\r\n    this.set('t', 0);\r\n    this.set('u', 0);\r\n    this.set('v', 0);\r\n    this.set('w', 0);\r\n    this.set('x', 0);\r\n    this.set('y', 0);\r\n    this.set('z', 0);\r\n\r\n    this.set('A', 0);\r\n    this.set('B', 0);\r\n    this.set('C', 0);\r\n    this.set('D', 0);\r\n    this.set('E', 0);\r\n    this.set('F', 0);\r\n    this.set('G', 0);\r\n    this.set('H', 0);\r\n    this.set('I', 0);\r\n    this.set('J', 0);\r\n    this.set('K', 0);\r\n    this.set('L', 0);\r\n    this.set('M', 0);\r\n    this.set('N', 0);\r\n    this.set('O', 0);\r\n    this.set('P', 0);\r\n    this.set('Q', 0);\r\n    this.set('R', 0);\r\n    this.set('S', 0);\r\n    this.set('T', 0);\r\n    this.set('U', 0);\r\n    this.set('V', 0);\r\n    this.set('W', 0);\r\n    this.set('X', 0);\r\n    this.set('Y', 0);\r\n    this.set('Z', 0);\r\n  }\r\n}\r\n\r\n","\r\n\r\nexport {VariableMap} from './VariableMap'","\r\nexport {ExpressionBuilder} from './core/ExpressionBuilder'\r\nexport {ExpressionParser} from './core/ExpressionParser'\r\n\r\nexport * from './expression'","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n"],"names":["root","factory","exports","module","define","amd","this","constructor","terms","expression","Expression","concat","setBrackets","add","term","index","undefined","splice","push","length","remove","getExpression","clear","parse","DivisionByZeroException","EvaluateException","message","super","EmptyExpressionException","Error","MissingOperandException","MissingTermException","TermAbstract","precedence","Array","brackets","pop","shift","unshift","active","evaluate","Log","toString","temp","clone","OperandAbstract","highest","highestId","forEach","t","id","evaluateTerm","value","Constant","OperatorAbstract","OperatorLeftRightAbstract","left","right","OperatorFunctionAbstract","args","debug","console","log","apply","str","name","symbol","Variable","letter","coefficient","_values","set","values","val","get","VariableMap","DivideOperator","ExponentOperator","Math","pow","MinusOperator","MultiplyOperator","PlusOperator","AndOperator","OrOperator","XorOperator","CosOperator","result","cos","LnOperator","LogOperator","log10","SinOperator","sin","SquareRootOperator","sqrt","TanOperator","tan","Map","ExpressionBuilder","ExpressionParser","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}