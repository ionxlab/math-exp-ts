{"version":3,"file":"math-exp.js","mappings":"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AI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAEjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,CAAC;CACF;AA3DD,kCA2DC;;;;;;;;;;;;;;AC3DD,sGAAyC;AAAjC,sHAAW;;;;;;;;;;;;;;;;;;;;;;;;ACDnB,iHAA0D;AAAlD,wIAAiB;AACzB,8GAAwD;AAAhD,qIAAgB;AAExB,4FAA4B;;;;;;;UCJ5B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://math-exp/webpack/universalModuleDefinition","webpack://math-exp/./src/core/ExpressionBuilder.ts","webpack://math-exp/./src/core/ExpressionParser.ts","webpack://math-exp/./src/exceptions/DivisionByZeroException.ts","webpack://math-exp/./src/exceptions/EmptyExpressionException.ts","webpack://math-exp/./src/exceptions/EvaluateException.ts","webpack://math-exp/./src/exceptions/MissingOperandException.ts","webpack://math-exp/./src/exceptions/MissingTermException.ts","webpack://math-exp/./src/expression/Expression.ts","webpack://math-exp/./src/expression/abstract/OperandAbstract.ts","webpack://math-exp/./src/expression/abstract/OperatorAbstract.ts","webpack://math-exp/./src/expression/abstract/OperatorFunctionAbstract.ts","webpack://math-exp/./src/expression/abstract/OperatorLeftRightAbstract.ts","webpack://math-exp/./src/expression/abstract/TermAbstract.ts","webpack://math-exp/./src/expression/index.ts","webpack://math-exp/./src/expression/operands/Constant.ts","webpack://math-exp/./src/expression/operands/Variable.ts","webpack://math-exp/./src/expression/operands/index.ts","webpack://math-exp/./src/expression/operators/arithmetic/Divide.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Exponent.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Minus.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Multiply.operator.ts","webpack://math-exp/./src/expression/operators/arithmetic/Plus.operator.ts","webpack://math-exp/./src/expression/operators/bitwise/And.operator.ts","webpack://math-exp/./src/expression/operators/bitwise/Or.operator.ts","webpack://math-exp/./src/expression/operators/bitwise/Xor.operator.ts","webpack://math-exp/./src/expression/operators/function/Cos.operator.ts","webpack://math-exp/./src/expression/operators/function/Ln.operator.ts","webpack://math-exp/./src/expression/operators/function/Log.operator.ts","webpack://math-exp/./src/expression/operators/function/Sin.operator.ts","webpack://math-exp/./src/expression/operators/function/SquareRoot.operator.ts","webpack://math-exp/./src/expression/operators/function/Tan.operator.ts","webpack://math-exp/./src/expression/operators/index.ts","webpack://math-exp/./src/expression/utils/VariableMap.ts","webpack://math-exp/./src/expression/utils/index.ts","webpack://math-exp/./src/index.ts","webpack://math-exp/webpack/bootstrap","webpack://math-exp/webpack/before-startup","webpack://math-exp/webpack/startup","webpack://math-exp/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"math-exp\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math-exp\"] = factory();\n\telse\n\t\troot[\"math-exp\"] = factory();\n})(this, function() {\nreturn ","import {Expression} from \"../expression/Expression\";\r\nimport {TermAbstract} from \"../expression/abstract/TermAbstract\";\r\n\r\n\r\nexport class ExpressionBuilder {\r\n\r\n  private expression: Expression = new Expression();\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    this.expression.terms = this.expression.terms.concat(terms);\r\n    this.expression.setBrackets(false);\r\n  }\r\n\r\n  add(term: TermAbstract, index?: number): number {\r\n    if(index!==undefined)\r\n      this.expression.terms.splice(index, 0, term);\r\n    else\r\n      this.expression.push(term);\r\n\r\n    return this.expression.terms.length;\r\n  }\r\n\r\n  remove(index): Expression {\r\n    if(index>=0 && index<this.expression.terms.length)\r\n      this.expression.terms.splice(index, 1);\r\n\r\n    return this.expression;\r\n  }\r\n\r\n  getExpression(): Expression {\r\n    return this.expression;\r\n  }\r\n\r\n  clear() {\r\n    this.expression.terms = [];\r\n  }\r\n}","import {Expression} from \"../expression/Expression\";\r\n\r\n\r\nexport class ExpressionParser {\r\n  private expressionString: (string | undefined);\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  parse(): Expression {\r\n    let exp = new Expression();\r\n\r\n\r\n    return exp;\r\n  }\r\n}","import {EvaluateException} from \"./EvaluateException\";\r\n\r\nexport class DivisionByZeroException extends EvaluateException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {EvaluateException} from \"./EvaluateException\";\r\n\r\nexport class EmptyExpressionException extends EvaluateException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","\r\n\r\nexport class EvaluateException extends Error {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {MissingTermException} from \"./MissingTermException\";\r\n\r\nexport class MissingOperandException extends MissingTermException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {EvaluateException} from \"./EvaluateException\";\r\n\r\nexport class MissingTermException extends EvaluateException {\r\n\r\n  constructor(message?: string) {\r\n    super(message);\r\n  }\r\n}","import {OperatorAbstract} from \"./abstract/OperatorAbstract\";\r\nimport {OperandAbstract} from \"./abstract/OperandAbstract\";\r\nimport {TermAbstract} from \"./abstract/TermAbstract\";\r\nimport {OperatorLeftRightAbstract} from \"./abstract/OperatorLeftRightAbstract\";\r\nimport {OperatorFunctionAbstract} from \"./abstract/OperatorFunctionAbstract\";\r\nimport {Constant} from \"./operands/Constant\";\r\nimport {MissingTermException} from \"../exceptions/MissingTermException\";\r\nimport {MissingOperandException} from \"../exceptions/MissingOperandException\";\r\nimport {EmptyExpressionException} from \"../exceptions/EmptyExpressionException\";\r\n\r\nexport class Expression extends TermAbstract {\r\n  public static debug = true;\r\n  readonly precedence: number = 19;\r\n\r\n  terms: Array<TermAbstract> = new Array<TermAbstract>();\r\n  private brackets: boolean = true;\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super();\r\n    if(terms !== undefined)\r\n      this.terms = this.terms.concat(terms);\r\n  }\r\n\r\n  push(term: TermAbstract): Expression {\r\n    this.terms.push(term);\r\n    return this;\r\n  }\r\n\r\n  pop(): TermAbstract {\r\n    return this.terms.pop();\r\n  }\r\n\r\n  shift(): TermAbstract {\r\n    return this.terms.shift();\r\n  }\r\n\r\n  unshift(term: TermAbstract): Expression {\r\n    this.terms.unshift(term);\r\n    return this;\r\n  }\r\n\r\n  setBrackets(active: boolean) {\r\n    this.brackets = active;\r\n  }\r\n\r\n  evaluate(): number {\r\n\r\n    if(this.terms.length==0)\r\n      throw new EmptyExpressionException();\r\n\r\n    this.Log(\"Evaluating:\", this.toString());\r\n\r\n    let temp = this.clone();\r\n\r\n    while(temp.terms.length>1 || !(temp.terms[0] instanceof OperandAbstract)) {\r\n\r\n      let highest = -1;\r\n      let highestId = -1;\r\n      temp.terms.forEach((t, id) => {\r\n        if(t.precedence>highest) {\r\n          highest = t.precedence;\r\n          highestId = id;\r\n        }\r\n      });\r\n      temp = this.evaluateTerm(temp, highestId);\r\n      this.Log(\"Temporary expression:\", temp.toString());\r\n    }\r\n\r\n    return (temp.terms[0] as OperandAbstract).evaluate();\r\n  }\r\n\r\n  private evaluateTerm(expression: Expression, index: number): Expression {\r\n\r\n    let temp = expression.clone();\r\n\r\n    const term = temp.terms[index];\r\n    this.Log(\"Evaluating Term:\", term.toString());\r\n\r\n    let value = 0;\r\n    if(!term) {\r\n      throw new MissingTermException(\"Term at '\"+index+\"' is missing.\");\r\n    } else if(term instanceof Expression) {\r\n      this.Log(\"Term is an 'Expression'\");\r\n      value = term.evaluate();\r\n      temp.terms[index] = new Constant(value);\r\n    } else if(term instanceof OperatorAbstract) {\r\n      if(term instanceof OperatorLeftRightAbstract) {\r\n        this.Log(\"Term is an 'OperatorLeftRight'\");\r\n        const left = temp.terms[index-1];\r\n        const right = temp.terms[index+1];\r\n\r\n        if(!(left instanceof OperandAbstract))\r\n          throw new MissingOperandException(\"Left argument of operator '\"+term.toString()+\"' is invalid.\");\r\n        if(!(right instanceof OperandAbstract))\r\n          throw new MissingOperandException(\"Right argument of operator '\"+term.toString()+\"' is invalid.\");\r\n\r\n        value = term.evaluate((left as OperandAbstract).evaluate(), (right as OperandAbstract).evaluate());\r\n\r\n        this.Log(\"Evaluated Value: \", value);\r\n\r\n        temp.terms[index] = new Constant(value);\r\n        temp.terms.splice(index+1, 1);\r\n        temp.terms.splice(index-1, 1);\r\n      } else if(term instanceof OperatorFunctionAbstract) {\r\n        this.Log(\"Term is an 'OperatorFunction'\");\r\n        value = term.evaluate();\r\n        temp.terms[index] = new Constant(value);\r\n      }\r\n    } else if(term instanceof OperandAbstract) {\r\n      this.Log(\"Term is an 'Operand'\");\r\n      value = term.evaluate();\r\n      temp.terms[index] = new Constant(value);\r\n    }\r\n\r\n    return temp;\r\n  }\r\n\r\n  private Log(...args: Object[]) {\r\n    if(Expression.debug)\r\n      console.log.apply(console, args);\r\n  }\r\n\r\n  clone(): Expression {\r\n    let clone = new Expression();\r\n    clone.brackets = this.brackets;\r\n    clone.terms = clone.terms.concat(this.terms);\r\n    return clone;\r\n  }\r\n\r\n  toString(): string {\r\n    let str = \"\";\r\n    this.terms.forEach((t, id) => {\r\n      str += t.toString();\r\n    });\r\n    if(this.brackets)\r\n      str = \"(\"+str+\")\";\r\n    return str;\r\n  }\r\n}","import {TermAbstract} from \"./TermAbstract\";\r\n\r\n\r\nexport abstract class OperandAbstract extends TermAbstract {\r\n\r\n  readonly precedence: number = 0;\r\n  abstract evaluate(): number ;\r\n}","import {TermAbstract} from \"./TermAbstract\";\r\n\r\n\r\nexport abstract class OperatorAbstract extends TermAbstract {\r\n  name: string;\r\n  symbol: string;\r\n\r\n  protected constructor(name: string, symbol: string) {\r\n    super();\r\n    this.name = name;\r\n    this.symbol = symbol;\r\n  }\r\n}","import {OperatorAbstract} from \"./OperatorAbstract\";\r\nimport {Expression} from \"../Expression\";\r\n\r\n\r\nexport abstract class OperatorFunctionAbstract extends OperatorAbstract {\r\n  name: string;\r\n  symbol: string;\r\n  expression: Expression;\r\n\r\n  readonly precedence: number = 18;\r\n\r\n  protected constructor(name: string, symbol: string, expression?: Expression) {\r\n    super(name, symbol);\r\n    this.expression = expression;\r\n  }\r\n\r\n  abstract evaluate(): number ;\r\n\r\n  toString(): string {\r\n    return this.symbol+this.expression.toString();\r\n  };\r\n}","import {OperatorAbstract} from \"./OperatorAbstract\";\r\n\r\nexport abstract class OperatorLeftRightAbstract extends OperatorAbstract {\r\n  name: string;\r\n  symbol: string;\r\n\r\n  protected constructor(name: string, symbol: string) {\r\n    super(name, symbol);\r\n    this.name = name;\r\n    this.symbol = symbol;\r\n  }\r\n\r\n  abstract evaluate(left: number, right: number): number ;\r\n\r\n  toString(): string {\r\n    return this.symbol;\r\n  };\r\n}","\r\n\r\nexport abstract class TermAbstract {\r\n\r\n  abstract readonly precedence: number;\r\n  abstract toString(): string;\r\n}","\r\n\r\nexport {Expression} from './Expression'\r\n\r\nexport * from './operators'\r\nexport * from './operands'\r\n\r\nexport * from './utils'\r\n","import {OperandAbstract} from \"../abstract/OperandAbstract\";\r\n\r\n\r\nexport class Constant extends OperandAbstract {\r\n\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  evaluate(): number {\r\n    return this.value;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value.toString();\r\n  }\r\n}","import {OperandAbstract} from \"../abstract/OperandAbstract\";\r\nimport {VariableMap} from \"../utils/VariableMap\";\r\n\r\nexport class Variable extends OperandAbstract {\r\n  private coefficient: number = 0;\r\n  private letter: string;\r\n  private static _values = new VariableMap();\r\n\r\n  constructor(letter: string, coefficient?: number, value?: number) {\r\n    super();\r\n    this.letter = letter;\r\n    if(coefficient !== undefined)\r\n      this.coefficient = coefficient;\r\n    if(value !== undefined)\r\n      Variable._values.set(this.letter, value);\r\n  }\r\n\r\n  static get values(): VariableMap {\r\n    return Variable._values;\r\n  }\r\n\r\n  evaluate(): number {\r\n    let val = Variable._values.get(this.letter);\r\n    if(val == undefined)\r\n      val = 0;\r\n    return (this.coefficient*val);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.coefficient.toString()+this.letter;\r\n  }\r\n}\r\n","\r\n\r\nexport {Constant} from './Constant'\r\nexport {Variable} from './Variable'","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\nimport {DivisionByZeroException} from \"../../../exceptions/DivisionByZeroException\";\r\n\r\nexport class DivideOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 13;\r\n\r\n  constructor() {\r\n    super(\"Divide\", \"/\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    if(right == 0)\r\n      throw new DivisionByZeroException();\r\n\r\n    return left/right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class ExponentOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 14;\r\n\r\n  constructor() {\r\n    super(\"Exponent\", \"^\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return Math.pow(left, right);\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class MinusOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 12;\r\n\r\n  constructor() {\r\n    super(\"Minus\", \"-\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return left-right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class MultiplyOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 13;\r\n\r\n  constructor() {\r\n    super(\"Multiply\", \"*\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return left*right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\nexport class PlusOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 12;\r\n\r\n  constructor() {\r\n    super(\"Plus\", \"+\")\r\n  }\r\n\r\n  evaluate(left:number, right:number): number {\r\n    return left+right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\n\r\nexport class AndOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 8;\r\n\r\n  evaluate(left: number, right: number): number {\r\n    return left & right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\n\r\nexport class OrOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 6;\r\n\r\n  evaluate(left: number, right: number): number {\r\n    return left | right;\r\n  }\r\n}","import {OperatorLeftRightAbstract} from \"../../abstract/OperatorLeftRightAbstract\";\r\n\r\n\r\nexport class XorOperator extends OperatorLeftRightAbstract {\r\n\r\n  readonly precedence: number = 7;\r\n\r\n  evaluate(left: number, right: number): number {\r\n    return left ^  right;\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class CosOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Cos\", \"cos\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.cos(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class LnOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Ln\", \"Ln\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.log(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class LogOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Log\", \"Log\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.log10(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class SinOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Sin\", \"sin\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.sin(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class SquareRootOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Sqrt\", \"√\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.sqrt(result);\r\n  }\r\n}","import {OperatorFunctionAbstract} from \"../../abstract/OperatorFunctionAbstract\";\r\nimport {Expression} from \"../../Expression\";\r\nimport {TermAbstract} from \"../../abstract/TermAbstract\";\r\n\r\nexport class TanOperator extends OperatorFunctionAbstract {\r\n\r\n  constructor(...terms: TermAbstract[]) {\r\n    super(\"Tan\", \"tan\", new Expression(...terms));\r\n  }\r\n\r\n  evaluate(): number {\r\n    const result = this.expression.evaluate();\r\n    return Math.tan(result);\r\n  }\r\n}","\r\n\r\nexport {DivideOperator} from './arithmetic/Divide.operator'\r\nexport {ExponentOperator} from './arithmetic/Exponent.operator'\r\nexport {MinusOperator} from './arithmetic/Minus.operator'\r\nexport {MultiplyOperator} from './arithmetic/Multiply.operator'\r\nexport {PlusOperator} from './arithmetic/Plus.operator'\r\n\r\nexport {AndOperator} from './bitwise/And.operator'\r\nexport {OrOperator} from './bitwise/Or.operator'\r\nexport {XorOperator} from './bitwise/Xor.operator'\r\n\r\nexport {CosOperator} from './function/Cos.operator'\r\nexport {LnOperator} from './function/Ln.operator'\r\nexport {LogOperator} from './function/Log.operator'\r\nexport {SinOperator} from './function/Sin.operator'\r\nexport {SquareRootOperator} from './function/SquareRoot.operator'\r\nexport {TanOperator} from './function/Tan.operator'\r\n","\r\n\r\nexport class VariableMap extends Map<string, number> {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.set('a', 0);\r\n    this.set('b', 0);\r\n    this.set('c', 0);\r\n    this.set('d', 0);\r\n    this.set('e', 0);\r\n    this.set('f', 0);\r\n    this.set('g', 0);\r\n    this.set('h', 0);\r\n    this.set('i', 0);\r\n    this.set('j', 0);\r\n    this.set('k', 0);\r\n    this.set('l', 0);\r\n    this.set('m', 0);\r\n    this.set('n', 0);\r\n    this.set('o', 0);\r\n    this.set('p', 0);\r\n    this.set('q', 0);\r\n    this.set('r', 0);\r\n    this.set('s', 0);\r\n    this.set('t', 0);\r\n    this.set('u', 0);\r\n    this.set('v', 0);\r\n    this.set('w', 0);\r\n    this.set('x', 0);\r\n    this.set('y', 0);\r\n    this.set('z', 0);\r\n\r\n    this.set('A', 0);\r\n    this.set('B', 0);\r\n    this.set('C', 0);\r\n    this.set('D', 0);\r\n    this.set('E', 0);\r\n    this.set('F', 0);\r\n    this.set('G', 0);\r\n    this.set('H', 0);\r\n    this.set('I', 0);\r\n    this.set('J', 0);\r\n    this.set('K', 0);\r\n    this.set('L', 0);\r\n    this.set('M', 0);\r\n    this.set('N', 0);\r\n    this.set('O', 0);\r\n    this.set('P', 0);\r\n    this.set('Q', 0);\r\n    this.set('R', 0);\r\n    this.set('S', 0);\r\n    this.set('T', 0);\r\n    this.set('U', 0);\r\n    this.set('V', 0);\r\n    this.set('W', 0);\r\n    this.set('X', 0);\r\n    this.set('Y', 0);\r\n    this.set('Z', 0);\r\n  }\r\n}\r\n\r\n","\r\n\r\nexport {VariableMap} from './VariableMap'","\r\nexport {ExpressionBuilder} from './core/ExpressionBuilder'\r\nexport {ExpressionParser} from './core/ExpressionParser'\r\n\r\nexport * from './expression'","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}